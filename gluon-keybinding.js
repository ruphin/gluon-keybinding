import{GluonElement}from'../gluonjs/gluon.js';const registeredElements={},handleKeydown=(a)=>a.defaultPrevented?void console.warn('Keypress ignored!'):void(registeredElements[a.key]&&registeredElements[a.key].every((b)=>{if(null!==b.offsetParent)return a.stopPropagation(),b.click(),!b.override}));window.addEventListener('keydown',handleKeydown,!0);export class GluonKeybinding extends GluonElement{static get observedAttributes(){return['key','override']}attributeChangedCallback(a,b,c){'key'===a&&this.__register(c,b),'override'===a&&this.__override(this.key)}set key(a){a?this.setAttribute('key',a):this.removeAttribute('key')}get key(){return this.getAttribute('key')}set override(a){a?this.setAttribute('override',''):this.removeAttribute('override')}get override(){return''===this.getAttribute('override')}__register(a,b){if(b&&registeredElements[b]){const a=registeredElements[b].indexOf(this);-1!=a&&(registeredElements[b].splice(a,1),0===registeredElements[b].length&&delete registeredElements[b])}a&&(!registeredElements[a]&&(registeredElements[a]=[]),this.override?registeredElements[a].unshift(this):registeredElements[a].push(this))}__override(a){if(a&&registeredElements[a]){const b=registeredElements[a].indexOf(this);-1!=b&&(registeredElements[a].splice(b,1),registeredElements[a].unshift(this))}}}customElements.define(GluonKeybinding.is,GluonKeybinding);
//# sourceMappingURL=gluon-keybinding.js.map
