{"version":3,"sources":["gluon-keybinding.js"],"names":["GluonElement","registeredElements","handleKeydown","defaultPrevented","console","warn","key","every","offsetParent","stopPropagation","click","override","window","addEventListener","GluonKeybinding","observedAttributes","attributeChangedCallback","__register","__override","setAttribute","removeAttribute","getAttribute","indexOf","splice","length","unshift","push","customElements","define","is"],"mappings":"AAAA,OAASA,YAAT,KAA6B,qBAA7B,CAEA,KAAMC,sBAAN,CAEMC,cAAgB,KAChB,EAAMC,gBADU,KAElBC,SAAQC,IAAR,CAAa,mBAAb,CAFkB,MAMhBJ,mBAAmB,EAAMK,GAAzB,CANgB,EAQlBL,mBAAmB,EAAMK,GAAzB,EAA8BC,KAA9B,CAAoC,KAAW,CAE7C,GAA6B,IAAzB,KAAQC,YAAZ,CAIE,MAHA,GAAMC,eAAN,EAGA,CAFA,EAAQC,KAAR,EAEA,CAAO,CAAC,EAAQC,QAEnB,CARD,CARkB,CAFtB,CAsBAC,OAAOC,gBAAP,CAAwB,SAAxB,CAAmCX,aAAnC,I,CAEA,KAAMY,gBAAN,QAA8Bd,aAAa,CACzC,UAAWe,mBAAX,EAAgC,CAC9B,wBACD,CAEDC,+BAAmD,CACpC,KAAT,IAD6C,EAE/C,KAAKC,UAAL,KAF+C,CAIpC,UAAT,IAJ6C,EAK/C,KAAKC,UAAL,CAAgB,KAAKZ,GAArB,CAEH,CAED,GAAIA,IAAJ,GAAa,GAET,KAAKa,YAAL,CAAkB,KAAlB,GAFS,CAIT,KAAKC,eAAL,CAAqB,KAArB,CAEH,CAED,GAAId,IAAJ,EAAU,CACR,MAAO,MAAKe,YAAL,CAAkB,KAAlB,CACR,CAED,GAAIV,SAAJ,GAAuB,GAEnB,KAAKQ,YAAL,CAAkB,UAAlB,CAA8B,EAA9B,CAFmB,CAInB,KAAKC,eAAL,CAAqB,UAArB,CAEH,CAED,GAAIT,SAAJ,EAAe,CACb,MAAyC,EAAlC,QAAKU,YAAL,CAAkB,UAAlB,CACR,CAEDJ,eAA2B,CACzB,GAAI,GAAUhB,qBAAd,CAA0C,CACxC,KAAM,GAAIA,sBAA2BqB,OAA3B,CAAmC,IAAnC,CAAV,CACS,CAAC,CAAN,GAFoC,GAGtCrB,sBAA2BsB,MAA3B,GAAqC,CAArC,CAHsC,CAII,CAAtC,yBAA2BC,MAJO,EAKpC,MAAOvB,sBAL6B,CAQzC,CATwB,IAWnB,CAACA,qBAXkB,GAYrBA,wBAZqB,EAcnB,KAAKU,QAdc,CAerBV,sBAA2BwB,OAA3B,CAAmC,IAAnC,CAfqB,CAiBrBxB,sBAA2ByB,IAA3B,CAAgC,IAAhC,CAjBqB,CAoB1B,CAEDR,aAAgB,CACd,GAAI,GAAOjB,qBAAX,CAAoC,CAClC,KAAM,GAAIA,sBAAwBqB,OAAxB,CAAgC,IAAhC,CAAV,CACS,CAAC,CAAN,GAF8B,GAGhCrB,sBAAwBsB,MAAxB,GAAkC,CAAlC,CAHgC,CAIhCtB,sBAAwBwB,OAAxB,CAAgC,IAAhC,CAJgC,CAMnC,CACF,CApEwC,CAuE3CE,eAAeC,MAAf,CAAsBd,gBAAgBe,EAAtC,CAA0Cf,eAA1C,C","file":"gluon-keybinding.js","sourcesContent":["import { GluonElement } from '../gluonjs/gluon.js';\n\nconst registeredElements = {};\n\nconst handleKeydown = event => {\n  if (event.defaultPrevented) {\n    console.warn('Keypress ignored!');\n    return; // Should do nothing if the key event was already consumed.\n  }\n\n  if (registeredElements[event.key]) {\n    // Use `every` so we can break from the loop if there's an override\n    registeredElements[event.key].every(element => {\n      // Only act on elements that are not in a hidden subtree in the DOM\n      if (element.offsetParent !== null) {\n        event.stopPropagation();\n        element.click();\n        // If the element is not an override, return true to keep iterating over elements\n        return !element.override;\n      }\n    });\n  }\n};\n\nwindow.addEventListener('keydown', handleKeydown, true);\n\nclass GluonKeybinding extends GluonElement {\n  static get observedAttributes() {\n    return ['key', 'override'];\n  }\n\n  attributeChangedCallback(attr, oldValue, newValue) {\n    if (attr === 'key') {\n      this.__register(newValue, oldValue);\n    }\n    if (attr === 'override') {\n      this.__override(this.key);\n    }\n  }\n\n  set key(key) {\n    if (key) {\n      this.setAttribute('key', key);\n    } else {\n      this.removeAttribute('key');\n    }\n  }\n\n  get key() {\n    return this.getAttribute('key');\n  }\n\n  set override(override) {\n    if (override) {\n      this.setAttribute('override', '');\n    } else {\n      this.removeAttribute('override');\n    }\n  }\n\n  get override() {\n    return this.getAttribute('override') === '';\n  }\n\n  __register(newKey, oldKey) {\n    if (oldKey && registeredElements[oldKey]) {\n      const i = registeredElements[oldKey].indexOf(this);\n      if (i != -1) {\n        registeredElements[oldKey].splice(i, 1);\n        if (registeredElements[oldKey].length === 0) {\n          delete registeredElements[oldKey];\n        }\n      }\n    }\n    if (newKey) {\n      if (!registeredElements[newKey]) {\n        registeredElements[newKey] = [];\n      }\n      if (this.override) {\n        registeredElements[newKey].unshift(this);\n      } else {\n        registeredElements[newKey].push(this);\n      }\n    }\n  }\n\n  __override(key) {\n    if (key && registeredElements[key]) {\n      const i = registeredElements[key].indexOf(this);\n      if (i != -1) {\n        registeredElements[key].splice(i, 1);\n        registeredElements[key].unshift(this);\n      }\n    }\n  }\n}\n\ncustomElements.define(GluonKeybinding.is, GluonKeybinding);\n"]}